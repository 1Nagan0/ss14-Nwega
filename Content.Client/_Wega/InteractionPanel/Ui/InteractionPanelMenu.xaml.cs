using System.Linq;
using System.Numerics;
using Content.Shared.Buckle.Components;
using Content.Shared.Chat.Prototypes;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.IdentityManagement;
using Content.Shared.Interaction;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

/// In the name of the Father and the Holy Spirit, have mercy on this panel. Amen
namespace Content.Client.Interaction.Panel.Ui
{
    [GenerateTypedNameReferences]
    public sealed partial class InteractionPanelMenu : DefaultWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly IEntityManager _entManager = default!;
        [Dependency] private readonly IEntityNetworkManager _entityNetworkManager = default!;
        [Dependency] private readonly IPlayerManager _playerManager = default!;
        private TransformSystem _transform;
        private EntityLookupSystem _lookup;

        private SpriteView _userSpriteView;
        private SpriteView _targetSpriteView;
        private Label _targetLabel;
        private Label _userGenderLabel;
        private Label _targetGenderLabel;

        public InteractionPanelMenu()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _transform = _entManager.System<TransformSystem>();
            _lookup = _entManager.System<EntityLookupSystem>();

            _userSpriteView = CreateSpriteView();
            _targetSpriteView = CreateSpriteView();
            _targetLabel = CreateLabel("");
            _userGenderLabel = CreateLabel("");
            _targetGenderLabel = CreateLabel("");

            SearchBar.OnTextChanged += OnSearchTextChanged;

            InitializeNamesContainer();
            _playerManager.PlayerStatusChanged += OnUserStatusChanged;

            PopulateInteractions();
            UpdateTarget();
        }

        private void InitializeNamesContainer()
        {
            var session = _playerManager.LocalSession;
            if (session?.AttachedEntity.HasValue == true)
            {
                var user = session.AttachedEntity.Value;
                var appearanceComponent = _entManager.GetComponentOrNull<HumanoidAppearanceComponent>(user);

                Names.AddChild(CreateLabel(Loc.GetString("interact-player")));

                var userGenderIcon = CreateGenderIconButton(appearanceComponent?.Sex);
                if (userGenderIcon != null)
                    Names.AddChild(userGenderIcon);
            }

            Names.AddChild(CreateSpacer());
            Names.AddChild(_targetLabel);
        }

        private TextureButton CreateGenderIconButton(Sex? sex)
        {
            var texturePath = sex switch
            {
                Sex.Male => "/Textures/_Wega/Interface/InteractionPanel/male.png",
                Sex.Female => "/Textures/_Wega/Interface/InteractionPanel/female.png",
                Sex.Unsexed => "/Textures/_Wega/Interface/InteractionPanel/unsexed.png",
                _ => "/Textures/_Wega/Interface/InteractionPanel/unknown.png"
            };

            var textureResource = IoCManager.Resolve<IResourceCache>().GetResource<TextureResource>(new ResPath(texturePath));
            return new TextureButton
            {
                TextureNormal = textureResource.Texture,
                Margin = new Thickness(4),
                Scale = new Vector2(0.5f, 0.5f)
            };
        }

        private SpriteView CreateSpriteView() => new()
        {
            OverrideDirection = Direction.South,
            Scale = new Vector2(2, 2),
            SetSize = new Vector2(64, 64)
        };

        private Label CreateLabel(string text) => new()
        {
            Text = text,
            Margin = new Thickness(4)
        };

        private BoxContainer CreateSpacer() => new()
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            MinHeight = 4,
            HorizontalExpand = true,
            Margin = new Thickness(0)
        };

        private void UpdateTarget()
        {
            var session = _playerManager.LocalSession;
            if (session?.AttachedEntity == null) return;

            var user = session.AttachedEntity.Value;
            var target = FindTarget(user);

            if (target.HasValue)
            {
                _targetSpriteView.SetEntity(target.Value);
                _targetLabel.Text = Identity.Name(target.Value, _entManager, session.AttachedEntity);

                var appearanceComponent = _entManager.GetComponentOrNull<HumanoidAppearanceComponent>(target.Value);
                UpdateGender(appearanceComponent, _targetGenderLabel);
            }
            else
            {
                _targetSpriteView.SetEntity(EntityUid.Invalid);
                _targetGenderLabel.Text = "";
                _targetLabel.Text = "";
            }
        }

        private void UpdateGender(HumanoidAppearanceComponent? appearanceComponent, Label genderLabel)
        {
            if (appearanceComponent == null)
            {
                genderLabel.Text = Loc.GetString("unknown-nearestplayer");
                return;
            }

            var dionaSpecies = new ProtoId<SpeciesPrototype>("Diona");
            var arachnidSpecies = new ProtoId<SpeciesPrototype>("Arachnid");
            var voxSpecies = new ProtoId<SpeciesPrototype>("Vox");

            genderLabel.Text = appearanceComponent.Species switch
            {
                var species when species == dionaSpecies => string.Join("\n", Loc.GetString("diona-leaves"), Loc.GetString("diona-branches")),
                var species when species == arachnidSpecies => Loc.GetString("arachnid-nearestplayer"),
                var species when species == voxSpecies => Loc.GetString("vox-nearestplayer"),
                _ => appearanceComponent.Sex switch
                {
                    Sex.Male => string.Join("\n", Loc.GetString("male-anal"), Loc.GetString("male-dick")),
                    Sex.Female => string.Join("\n", Loc.GetString("female-anal"), Loc.GetString("female-vagine"), Loc.GetString("female-breasts")),
                    Sex.Unsexed => Loc.GetString("unsexed-nearestplayer"),
                    _ => Loc.GetString("unknown-nearestplayer")
                }
            };

            var targetGenderIcon = CreateGenderIconButton(appearanceComponent.Sex);
            if (targetGenderIcon != null)
                Names.AddChild(targetGenderIcon);
        }

        private void OnUserStatusChanged(object? sender, SessionStatusEventArgs e)
        {
            if (e.Session.AttachedEntity.HasValue)
            {
                UpdateUser(e.Session.AttachedEntity.Value);
                UpdateTarget();
            }
        }

        public void UpdateUser(EntityUid user)
        {
            _userSpriteView.SetEntity(user);

            var appearanceComponent = _entManager.GetComponentOrNull<HumanoidAppearanceComponent>(user);
            if (appearanceComponent?.Status == Status.No)
            {
                _userGenderLabel.Text = "";
                return;
            }

            var dionaSpecies = new ProtoId<SpeciesPrototype>("Diona");
            var arachnidSpecies = new ProtoId<SpeciesPrototype>("Arachnid");
            var voxSpecies = new ProtoId<SpeciesPrototype>("Vox");

            _userGenderLabel.Text = appearanceComponent?.Species switch
            {
                var species when species == dionaSpecies => string.Join("\n", Loc.GetString("diona-leaves-player"), Loc.GetString("diona-branches-player")),
                var species when species == arachnidSpecies => Loc.GetString("arachnid-player"),
                var species when species == voxSpecies => Loc.GetString("vox-player"),
                _ => appearanceComponent?.Sex switch
                {
                    Sex.Male => string.Join("\n", Loc.GetString("male-anal-player"), Loc.GetString("male-dick-player")),
                    Sex.Female => string.Join("\n", Loc.GetString("female-anal-player"), Loc.GetString("female-vagine-player"), Loc.GetString("female-breasts-player")),
                    Sex.Unsexed => Loc.GetString("unsexed-player"),
                    _ => Loc.GetString("unknown-player")
                }
            };
        }

        private void PopulateInteractions()
        {
            var interactionPrototypes = _prototypeManager.EnumeratePrototypes<InteractionPrototype>();
            var session = _playerManager.LocalSession;

            if (session?.AttachedEntity == null) return;

            var user = session.AttachedEntity.Value;
            if (!_entManager.TryGetComponent<HumanoidAppearanceComponent>(user, out var appearanceComponent)) return;

            foreach (var prototype in interactionPrototypes)
            {
                var target = FindTarget(user);
                if (target.HasValue && !IsInteractionAllowed(prototype, appearanceComponent, target.Value)) continue;

                var buttonContainer = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                    HorizontalExpand = false,
                    Margin = new Thickness(0.1f)
                };

                var button = new Button
                {
                    Text = Loc.GetString(prototype.Name),
                    MinWidth = 420,
                    MinHeight = 32
                };

                button.OnButtonDown += args => OnInteractionPressed(prototype.ID);

                if (prototype.Icon is SpriteSpecifier.Texture textureSpecifier)
                {
                    var texturePath = textureSpecifier.TexturePath.IsRooted ? textureSpecifier.TexturePath : new ResPath("/Textures/" + textureSpecifier.TexturePath);
                    var textureResource = IoCManager.Resolve<IResourceCache>().GetResource<TextureResource>(texturePath);

                    var iconButton = new TextureButton
                    {
                        TextureNormal = textureResource.Texture,
                        Margin = new Thickness(4),
                        Scale = new Vector2(1f, 1f)
                    };

                    buttonContainer.AddChild(iconButton);
                }

                buttonContainer.AddChild(button);
                InteractionContainer.AddChild(buttonContainer);
            }
        }

        private bool IsInteractionAllowed(InteractionPrototype prototype, HumanoidAppearanceComponent userAppearance, EntityUid target)
        {
            if (!_entManager.TryGetComponent<HumanoidAppearanceComponent>(target, out var targetAppearance))
                return false;

            bool isSpeciesAllowed = prototype.AllowedSpecies?.Contains("all") == true || prototype.AllowedSpecies?.Contains(userAppearance.Species) == true;
            bool isSpeciesBlacklisted = prototype.BlackListSpecies?.Contains(userAppearance.Species) == true || prototype.BlackListSpecies?.Contains(targetAppearance.Species) == true;
            bool isGenderAllowed = prototype.AllowedGenders?.Contains("all") == true || prototype.AllowedGenders?.Contains(userAppearance.Sex.ToString()) == true;
            bool isNearestSpeciesAllowed = prototype.NearestAllowedSpecies?.Contains("all") == true || prototype.NearestAllowedSpecies?.Contains(targetAppearance.Species) == true;
            bool isNearestGenderAllowed = prototype.NearestAllowedGenders?.Contains("all") == true || prototype.NearestAllowedGenders?.Contains(targetAppearance.Sex.ToString()) == true;
            bool isTargetEntityAllowed = prototype.TargetEntityId == null || prototype.TargetEntityId.Contains(target.ToString());
            bool isErpAllowed = prototype.ERP && userAppearance.Status != Status.No && targetAppearance.Status != Status.No;

            return isSpeciesAllowed && !isSpeciesBlacklisted && isGenderAllowed && isNearestSpeciesAllowed && isNearestGenderAllowed && isTargetEntityAllowed && isErpAllowed;
        }

        private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
        {
            var searchText = SearchBar.Text.ToLower();
            foreach (var child in InteractionContainer.Children)
            {
                if (child is BoxContainer container)
                {
                    var button = container.Children.OfType<Button>().FirstOrDefault();
                    var iconButton = container.Children.OfType<TextureButton>().FirstOrDefault();
                    if (button != null)
                    {
                        bool isVisible = button.Text?.ToLower().Contains(searchText) == true;
                        button.Visible = isVisible;
                        if (iconButton != null)
                        {
                            iconButton.Visible = isVisible;
                        }
                    }
                }
            }
        }

        private void OnInteractionPressed(string interactionId)
        {
            var session = _playerManager.LocalSession;
            if (session?.AttachedEntity == null) return;

            var user = session.AttachedEntity.Value;
            if (!_entManager.TryGetNetEntity(user, out var userEntity)) return;

            var target = FindTarget(user);
            if (target == null) return;

            _entityNetworkManager.SendSystemNetworkMessage(new InteractionPressedEvent(userEntity.Value, interactionId, _entManager.GetNetEntity(target)));
        }

        private EntityUid? FindTarget(EntityUid user)
        {
            if (!_entManager.TryGetComponent<TransformComponent>(user, out var sourceTransform)) return null;

            var sourceWorldPosition = _transform.GetWorldPosition(user);
            var nearbyEntities = _lookup.GetEntitiesInRange<HumanoidAppearanceComponent>(sourceTransform.Coordinates, 2f);

            var target = nearbyEntities
                .Where(e => e.Owner != user)
                .Select(e => (Entity: e.Owner, Distance: Vector2.Distance(sourceWorldPosition, _transform.GetWorldPosition(e.Owner))))
                .OrderBy(e => e.Distance)
                .FirstOrDefault();

            if (target.Entity == default)
            {
                var strapEntities = _lookup.GetEntitiesInRange<StrapComponent>(sourceTransform.Coordinates, 2f);
                foreach (var strapEntity in strapEntities)
                {
                    var strap = strapEntity.Owner;
                    if (!_entManager.TryGetComponent<StrapComponent>(strap, out var strapComponent))
                        continue;

                    foreach (var buckledEntity in strapComponent.BuckledEntities)
                    {
                        if (buckledEntity == user)
                            continue;

                        if (!_entManager.TryGetComponent<TransformComponent>(buckledEntity, out var buckledEntityTransform))
                            continue;

                        var buckledEntityWorldPosition = _transform.GetWorldPosition(buckledEntity);
                        var distance = Vector2.Distance(sourceWorldPosition, buckledEntityWorldPosition);
                        if (distance <= 2f)
                        {
                            target = (Entity: buckledEntity, Distance: distance);
                            break;
                        }
                    }

                    if (target.Entity != default)
                        break;
                }
            }

            return target.Entity == default ? null : target.Entity;
        }
    }
}
