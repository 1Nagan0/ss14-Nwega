using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.Blood.Cult;
using Content.Shared.Blood.Cult.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;

namespace Content.Client.Structure.UI;

[GenerateTypedNameReferences]
public sealed partial class BloodStructureMenu : RadialMenu
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IEntityNetworkManager _entityNetworkManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly ISharedPlayerManager _playerManager = default!;

    public event Action<string>? OnSelectItem;
    public bool IsDisposed { get; private set; }
    private NetEntity _structure;

    public BloodStructureMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void SetData(NetEntity structure)
    {
        _structure = structure;
        InitializeButtons();
    }

    private void InitializeButtons()
    {
        var structure = _entityManager.GetEntity(_structure);
        if (!_entityManager.TryGetComponent<BloodStructureComponent>(structure, out var structureComp)
            || structureComp.StructureGear.Count == 0)
            return;

        foreach (var prototypeId in structureComp.StructureGear)
        {
            if (!_prototypeManager.TryIndex<EntityPrototype>(prototypeId, out var prototype))
                continue;

            var button = new RadialMenuButton
            {
                ToolTip = prototype.Name,
                SetSize = new Vector2(64, 64),
            };

            button.StyleClasses.Add("RadialMenuButton");

            var entityView = new EntityPrototypeView
            {
                Scale = new Vector2(2, 2),
                SetSize = new Vector2(64, 64),
                Margin = new Thickness(4)
            };
            entityView.SetPrototype(prototype.ID);

            button.AddChild(entityView);

            button.OnPressed += _ =>
            {
                HandleItemSelection(prototype.ID);
            };

            Main.AddChild(button);
        }
    }

    private void HandleItemSelection(string name)
    {
        OnSelectItem?.Invoke(name);
        var netEntity = _entityManager.GetNetEntity(_playerManager.LocalSession?.AttachedEntity ?? EntityUid.Invalid);
        _entityNetworkManager.SendSystemNetworkMessage(new BloodStructureMenuClosedEvent(netEntity, name, _structure));
        Close();
    }

    public new void Close()
    {
        if (!IsDisposed)
        {
            IsDisposed = true;
            Dispose();
        }
    }
}

